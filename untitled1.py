# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ysHxpWvkt2XPGA2cHAs4D9WgAXZKA_ld
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error

Jwb_benar = ctrl.Antecedent(np.arange(0, 11, 1), 'Jwb_benar')
usaha = ctrl.Antecedent(np.arange(0, 11, 1), 'usaha')
nilai = ctrl.Consequent(np.arange(0, 101, 1), 'nilai')

Jwb_benar['rendah'] = fuzz.trimf(Jwb_benar.universe, [0, 0, 5])
Jwb_benar['sedang'] = fuzz.trimf(Jwb_benar.universe, [0, 5, 10])
Jwb_benar['tinggi'] = fuzz.trimf(Jwb_benar.universe, [5, 10, 10])

usaha['kurang'] = fuzz.trimf(usaha.universe, [0, 0, 5])
usaha['cukup'] = fuzz.trimf(usaha.universe, [0, 5, 10])
usaha['bagus'] = fuzz.trimf(usaha.universe, [5, 10, 10])

nilai['gagal'] = fuzz.trimf(nilai.universe, [0, 0, 65])
nilai['lulus'] = fuzz.trimf(nilai.universe, [55, 70, 85])
nilai['memuaskan'] = fuzz.trimf(nilai.universe, [75, 100, 100])

rule1 = ctrl.Rule(Jwb_benar['rendah'] | usaha['kurang'], nilai['gagal'])
rule2 = ctrl.Rule(Jwb_benar['sedang'] & usaha['cukup'], nilai['lulus'])
rule3 = ctrl.Rule(Jwb_benar['tinggi'] & usaha['cukup'], nilai['lulus'])
rule4 = ctrl.Rule(Jwb_benar['sedang'] & usaha['bagus'], nilai['memuaskan'])
rule5 = ctrl.Rule(Jwb_benar['tinggi'] & usaha['bagus'], nilai['memuaskan'])

grading_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5])
grading_sim = ctrl.ControlSystemSimulation(grading_ctrl)

print("--- Menjalankan 3 Kasus Uji ---")

grading_sim.input['Jwb_benar'] = 2
grading_sim.input['usaha'] = 3
grading_sim.compute()
print(f"Kasus 1 (Jwb_benar: 2, Usaha: 3) -> Nilai Akhir: {grading_sim.output['nilai']:.2f}")

grading_sim.input['Jwb_benar'] = 6
grading_sim.input['usaha'] = 6
grading_sim.compute()
print(f"Kasus 2 (Jwb_benar: 6, Usaha: 6) -> Nilai Akhir: {grading_sim.output['nilai']:.2f}")

grading_sim.input['Jwb_benar'] = 9.5
grading_sim.input['usaha'] = 8.5
grading_sim.compute()
print(f"Kasus 3 (Jwb_benar: 9.5, Usaha: 8.5) -> Nilai Akhir: {grading_sim.output['nilai']:.2f}")

from mpl_toolkits.mplot3d import Axes3D

up_sampled = np.linspace(0, 10, 20)
x, y = np.meshgrid(up_sampled, up_sampled)
z = np.zeros_like(x)

for i in range(20):
    for j in range(20):
        grading_sim.input['Jwb_benar'] = x[i, j]
        grading_sim.input['usaha'] = y[i, j]
        grading_sim.compute()
        z[i, j] = grading_sim.output['nilai']


fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')
surf = ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='viridis',
                       linewidth=0.4, antialiased=True)
ax.set_xlabel('Jwb_benar')
ax.set_ylabel('Usaha')
ax.set_zlabel('Nilai')
ax.set_title('Surface Plot Sistem Grading Fuzzy')
plt.show()

X = np.linspace(0, 2 * np.pi, 200).reshape(-1, 1)
y = np.sin(X).ravel()

ann = MLPRegressor(hidden_layer_sizes=(100, 50),
                   activation='tanh',
                   solver='adam',
                   max_iter=2000,
                   random_state=42)

print("Melatih model ANN...")
ann.fit(X, y)
print("Pelatihan selesai.")

y_pred = ann.predict(X)

mse = mean_squared_error(y, y_pred)
print(f"\nMean Squared Error (MSE): {mse:.6f}")

plt.figure(figsize=(10, 6))
plt.plot(X, y, label='Fungsi sin(x) Original', color='blue', linewidth=2)
plt.plot(X, y_pred, label='Prediksi ANN', color='red', linestyle='--', linewidth=2)
plt.title('Aproksimasi Fungsi sin(x) dengan ANN')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.legend()
plt.grid(True)
plt.show()